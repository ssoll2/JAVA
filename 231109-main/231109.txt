@매개변수(함수:(매개변수)-> 리턴(X/O))의 다형성 , 다양하게 매개변수를 참조한다,
1) 참조변후의 다형적인 특징은 매개변수 적용가능하다.
- 자신 및 자손타입의 인스턴스를 넘겨줄 수 있다.
2) 전자제품 판매점 고객관리 예제

@오버로딩/오버라이딩 정리하기
오버로딩: 기본생성자, 다양한 매개변수를 활용해서 사용하는 방법
기본생성자(나자신): 객체가 생성될때 초기화된다.
기본생성자(매개변수개수, 매개변수자료형) 여러가지로 만들 수 있다.
슈퍼생성자(상속받은 부모를 의존할때) 먼저 정의한다.
class Person{
      Person(String name) {
          this.name = name;
    
      } 
     void talk() {
System.out.println("나는 부모다.");
}
class Price extends Person{
int money = 0;
  Price(int price, String name){
   super(name); // 슈퍼생성자
   this.money = 200;
}
  void talk() { // 부모의 메서드 이름을 그대로 사용(선언부)
    System.out.println("나는 자식이다.");

}

main method() {
  Price p = new Price(price, name);
  p.name;
  p.price
오버라이딩: 상속받은 조상의 매서드를 자식의 다양한 형태로 구조를 만들고 사용한 것
2) 형변환 전 반드시 instance of로 확인해야 함.


P.304
section 12: 추상 클래스와 메서드
	인터페이스(객체지향 끝)
선언부: 리턴타입 함수(입력값): 호출하는 부분
구현부: 함수를 구체적으로 정의한 내용 --> 호출되었을 때 처리할 내용 
메서드 -> 함수
String func(){ //선언부
	return "test"; // 구현부
}

추상클래스: 미완성 설계도
선언부: 함수를 호출하는 부분을 공통으로 만듬 --> 추상클래스(부모);
구현부: 호출했을 때 처리할 내용 --> 추상클래스를 상속받은 자식이 완성한다.
1) 미완성 설계도 미완성 메서드라고 한다.
2) 다른 클래스에 도움을 준다.(상속받은 자식) = 미완성되었다.
인스턴스 생성 불가(몸통이 없다. 그래서 안됨)
3) 인스턴스 생성을 위해서는 자식이 상속을 통해 추상메서드 완성
4) 추상클래스는 추상 메서드를 구현한다는 방법만 다르고 
일반 클래스와 동일하다.
1) 추상클래스를 abstract class Player{
// 추상메서드
  1.일반 인스턴스 메서드/인스턴스 변수도 만들고 상속받을 수 있다.
  2. 생성자도 만둘 수 있다.(오버로딩): 추상클래스(부모)
     슈퍼생성자 만들 수 있다.
  3. 추상메서드를 만들면(무조건X) 상속받은 자식은 무조건 강제로 추상메서드를 구현한다.(오류남) *

}
2)  상속 계층도를 따라 내려갈수록 클래스는 세분화되며 구체화 정도가 심해진다.(조상의 클래스를 추상메서드로 활용하면 좋지않다.)











