내부 클래스: 
멤버 클래스: 1. 인스턴스 멤버 클래스
	  : A: 외부 클래스 B: 내부 클래스
	    -> 외부 클래스 생성한 후 B 내부 클래스를 생성할 수 있다.
	   멤버 메소드/ 멤버변수/ 정적 메소드 / 정적 변수
	   -> 외부 클래스 모든 인스턴스/정적 멤버를 모두 활용할 수 있다.

	   2. 정적멤버 클래스
	   : A: 외부 클래스 B: 내부 클래스
	   -> 외부 클래스를 생성하지 않아도 내부 클래스를 생성할 수 있다.
	   정적 메소드 / 정적 변수
	   -> 외부 클래스 정적인 요소만 지역적인 관계에서 가져올 수 있다.
로컬 클래스: 외부 클래스 안에서 생성자 또는 메소드에서 내부 클래스를 설계하고 호출할 수 있다.

@중첩 인터페이스 :
외부 클래스 안에서 인터페이스를 설계하고 인터페이스(버튼 이벤트) 같은 호출하는 부분에 객체를 주입하는 형태로
하나의 인터페이스(버튼) 여러가지 객체를 담아서 사용할 수 있는 방법이다.

구현방법)
class A{
         [접근 제한자] interface B{ // 중첩 인터페이스
         // 상수필드
        // 추상 메서드
        // 디폴트 메서드
        // 정적 메서드
         }
}

@익명 클래스
1)이름이 없는 클래스이며 선언과 객체의 생성을 동시에 할 수 있다.
객체를 생성하는 일회용 클래스이다.
2) 하나의 클래스를 상속받거나 인터페이스도 상속받을 수 있다.
- 익명 자식 객체
부모 클래스를 상속받아 생성될 수 있다.
구현방법)
new 부모 생성자(매개값){
	// 필드
	// 메서드
}

익명 구현 객체는 안드로이드와 같은 UI프로그램
이벤트 처리하는 객체로 많이 사용된다.
(프로토타입: 자바스크립트: 객체를 이용)
인터페이스는 객체로 생성될 수 없고 익명 구현 객체가 
인터페이스 타입으로 대입되고 선언된 멤버를 접근한다.

@예외처리
에러: 하드웨어 고장으로 인해 응용프로그램을 실행 오류 발생하는 것이다.(개발자 대체할 수 없다.)
- OutOfMemoryError: 프로그램 실행중 메모리 부족
(업그레이드 장치를 다시 재부착)
- IO Error: 입출력 에러(스피커/프린터)
-StackOverFlowError: 가용 메모리 부족 재귀호출
예외: 개발자의 잘못된 코딩으로 인해서 발생하는 에러
예외가 발생되면 프로그램은 곧바로 종료된다.
-일반예외(체크된 예외): 컴파일러가 예외처리 코드 검사
1. 자바 컴파일러가 명시적으로 try-catch-finally
강제적으로 처리하는 예외유형
2. SQLException -> DB 접근할 때 처리를 강제적으로 사용
   IOException -> 입출력도 강제적으로 사용
   RuntimeException 제외된 모든 예외
-실행예외(비체크된 예외): 컴파일러가 예외 처리 코드 여부를 검사하지 않는 코드이다.

@실행예외
1.NullPointerException: 객체를 선언하면 인스턴스 주소가 가지게 되는데 객체는 정의되는데
실제 메모리가 없는 상태
2. NumberFormateException: 잘못된 숫자로 형변환이 발생하거나 숫자 형태의 문자열은 정수타입으로 가능하나
실수형은 문자형으로 반환할 때 오류가 생김
3.ArrayIndexOutofBoundsException: 배열에서 인덱스 범위가 초과할 때 발생하는 오류


@예외 처리 문법
예외가 발생되었을 때 프로그램의 갑작스러운 종료를 막고 정상 실행을 유지할 수 있도록
처리하는 코드이다.
생성자 내부 또는 메서드 내부에서 사용된다.

1) 예외 미처리
코드가 진행 에러 발생 -> JVM 예외 분석 후 예외 클래스 생성 -> 예외 객체를 발생지점으로 호출처리
-> 처리 안될시 비정상 종료

2) 예외 처리
코드작성) 발생 가능성을 예측하고 예외 처리 문법을 이용
try{

// 무조건 명령어 실행

}catch(예외처리종류){

// 오류가 발생될때 처리

}finally{
// 항상 실행되는 코드
// 강제적인 명시는 아니다.

}






