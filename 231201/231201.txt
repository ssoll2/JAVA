@람다식
익명객체 호출 : 객체를 생성하지 않아도 생성할 때 객체를 만든다.
1. 함수로 데이터를 처리하는 기법이다.
2. 함수형 프로그래밍은 입력(매개변수:다형성->인터페이스) 중괄호 블록이다.
3. 람다식: (매개변수, 매개변수)->{처리내용}표기방법이다.
4. 자바는 람다식을 익명 구현객체(인터페이스:추상메서드)로 변환한다.
5. 인터페이스가 하나의 추상메소드를 가질 때 함수형 인터페이스다.
추상메서드가 1개 없으면 안된다.
1) 매개변수가 없는 람다식
2) 리턴이 있는 람다식
3) 메소드 참조(정적 메소드/인스턴스 메소드)
메소드를 참조해서 매개변수의 정보 또는 리턴 타입을 알아낸다.
람다식에서 불필요한 매개변수를 제거하는 목적으로 사용하는 방법이다.
-정적메소드: 클래스 :: 메소드
-인스턴스 메소드: 참조변수::메소드
4) 매개변수 메소드 참조
람다식에서 제공하는 a매개변수의 메소드를 호출해서 b매개변수를
매개값으로 제공하는 방법이다.
a:데이터타입 --> String:compareToIgnore 메소드를 참조해서 사용한다.
(a,b) --> 데이터타입(형을 만들고) --> b매개변수값을 비교해서 데이터에
대한 조건값을 클래스에서 조건을 비교해서 처리할 수 있게 만든다.
5) 인터페이스 객체 선언시 람다식 이용해 함수를 구현하는 방법

@프로세스와 스레드
컴퓨터가 동시에 여러가지 작업을 처리하는 행동을 멀티태스킹
프로세스 내부에 한개의 스레드가 존재하며 실행 흐름을 만든다.
OS > JVM > 프로세스(프로그램) > 스레드단계를 구성한다.
프로그램 : 프로그래밍 코드의 집합체이다.
프로세스 : 프로그램의 한 단위를 말하며 실행중인 독립적인 메모리
스레드 : 프로그램 안에서 동작하는 작업단위 스레드를 통해서
여러가지 작업을 할 수 있다.

1) 스레드 사용방법
1. Thread 클래스 통해 상속받는다.
2. 클래스 상속이 어려운 경우 Runnable 인터페이스를 상속받아서 사용한다.
Thread th = new Thread(Runnable을 상속한 인스턴스);
예제파일 : 스레드를 다양한 활용

2) 스레드 동기화
스레드가 하나의 공유 데이터에 동시에 접근하지 못하도록 스레드를 
실행하는 제어를 스레드 동기화라고 한다.

1. 스레드 동기화 처리
멀티 스레드 동작 -> 임계영역처리 -> 종료시 잠금해제 -> 스레드 동작
- 메서드 동기화 처리
사용할 메소드 앞에 키워드를 붙인다. / /전체적인 동기화
- 블록 동기화 처리 : 특정영역만 동기화 처리가 가능하다.
Synchronized(객체명);

3) 스레드 I/O 블락킹
4) 스레드 우선순위
작업위 중요도에 따라서 스레드 우선순위를 다르게 하여
특정 스레드가 더 많은 작업시간을 가질 수 있게 한다.
-main()의 우선순위는 자동적으로 5가된다.


5) 스레드 상태
스레드는 생성/실행/종료 상태를 갖게 되며 속성을 구분해서 관리한다.
생성: new Thread -> 스레드 객체가 생성되었지만 start  메소드호출안되었다.
대기: Runnable -> 실행대기 또는 실행상태로 진행되고 언제든 시작가능
1. 자기 차례가 될때 까지 기다린다.
2. 실행대기열은 큐와 같은 구조로 들어온 스레드가 먼저 실행된다.
실행: start() 실행된 상태
소멸: stop()
- 메소드
1. sleep() : 지정된 시간이 지나면 자동적으로 다시 실행 대기 상태가 된다.
2. join() : 지정된 시간동안 스레드가 실행되고 지나면 join을 실행한 스레드로
다시돌아와 실행을 계속한다.
3. interrupt() : sleep()/join() 일시정지 상태에서 스레드를 깨워서 
실행대기 상태로 만든다.
4. stop() : 스레드를 종료시킨다.
5. suspend() : 스레드를 일시정지하고 resume() 실행 대기상태로 돌아간다.
6. resume() : suspend()에 의해서 일시정지 상태에 있는 스레드를 
실행대기 상태로 보낸다.
7. yield() : 실행 중에 자신에게 주어진 실행시간을 다른 스레드에게 양보한다.




















